----- USANDO O DOCKER COMO CLIENTE ---------

SUBIR CONTAINERS
docker-compose up -d 

ENTRAR NO CONTAINER
docker exec -u 1000 -it dev_php bash |(em que dev_php é o nome do container, e tbm poderia se seu ID)

PARAR CONTAINER (sempre ao final do dia de trabalho, para n dar conflito de network)
docker-compose down 

--------- FIM USANDO DOCKER COMO CLIENTE ----------


---- ACESSANDO O BANCO MYSQL NO TERMINAL ---
mysql -u user -p

Para usar a base de dados:
use nome_do_banco; 

Para exibir as tabelas da base de dados:
show tables; 

Para detalhar a migration:
describe migrations;

Para detalhar uma tabela:
describe nome_da_table;

---- FIM ACESSANDO BANCO MYSQL NO TERMINAL ---


----------- MIGRATIONS ------------

Criar migration
php artisan make:migration nome_migration 

Para executar as migracoes pendentes:
php artisan migrate 
OBS:o arquivo .env deve estar configurado com o nome do bando, usuário e senha

Para desfazer a última migrate (que pode ter executado varias migrations simultaneamente)
php artisan migrate:rollback 

Para desfazer todas as migrations
php artisan migrate: fresh
OBS: não chamará o down(), mas sim dar um 
DROP TABLE em todas as tabelas

Para desfazer e refazer todas as migrates
php artisan migrate:refresh 
OBS: o método down() das migrations será chamado, para desfazer
depois o método up() das mesmas, para refazer.

Para visualizar as migrations:
php artisan migrate:status

---------- FIM MIGRATIONS ------------------

---------- MODEL ---------------
* Para criar um model 
php artisan make:model NomeDoModel
-> cria arquivo .php dentro de app\models

---------- TINKER PARA MANIPULAR AS MODELS -------
* A partir de um terminal (que tenha acesso php)
Para Manipular Models:

1- php artisan tinker (ambiente de terminal para interagir com a aplicação laravel)

2- Para selecionar a Model
use \App\Models\NomeDaModel

3- Para listar os registros (array) 
NomeDaModel::all()

4- Para instanciar a Model 
   $objeto = new NomeDaModel
   $objeto->save()
   (cria vazio) ou
   $objeto = NomeDaModel::create(["nome"=>"LG"]) 

5- Para atribuir valor a um atributo. 
$objeto->atributo = "valorDoAtributo";
    $objeto->save()

6- Para recuperar um ou mais registros, baseado na PK
    NomeDaModel::find(id)
    NomeDaModel::find([id1, id2, id3])

7- Para recuperar registros baseados em um atributo 
    NomeDaModel::where('id', 1)->get()
    NomeDaModel::where('id','>','1')->get()
    NomeDaModel::where('nome', 'samsung')->get()
    
    NomeDaModel::whereBetween('id', [2,3])->get
        -> retornará todos os registros no intervalo 2-3
    
    NomeDaModel::whereNotBetween('id',[2,3])
        -> retornará todos os registros q não estão no intervalo 2-3

    NomeDaModel::whereNoIn('id', [2,4])
        -> retornará todos os registros que não têm id 2 ou 4. (não é intervalo!)

    NomeDaModel::whereIn('id', [2,4])
        -> retornará os registros que têm id 2 ou 4. (não é intervalo!)

Where-> Pode ser passado os comparativos (virgula (interpretará como ==), <>, <, >, <=, >=)

8 - Consultando com o like
        A) Passando o valor no parâmetro
    NomeDaModel::where('nome', 'like', '%e%')
        B) Passando uma variável no parâmetro
    $nome = Amanda;
    NomeDaModel::where('nome', 'like', "%$nome%")

9 - BUSCANDO REGISTROS BASEADOS EM MAIS DE 1 atributo
    
    A)--> E - && 
        NomeDaModel::where('id','>','1')->where('nome','LG')
    
    B)--> OU - || 
        NomeDaModel::Where('id','1')->orWhere('nome','LG')

    C) (condicao OR condicao) AND (condicao OR condicao)
        (id>1 and id<4) and (name=lg or name=apple)

    PASSO 1 - armazenar o resultado do primeiro parênteses:
        Marca::where( function($query){ $query-> where('id', '>',1)->where('id','<',4);})->get()
    
    PASSO 2- continuar, agora concatenando e resolvendo o segundo parênteses
        Marca::where( function($query){ $query-> where('id', '>',1)->where('id','<',4);})->where( function($query){$query-> where('nome','LG')->orWhere('nome','apple');})->get()

10 - Ordenando Resultados

    NomeDaModel::orderBy('nome')->get()   -> A - Z
    NomeDaModel::orderBy('nome','desc')->get()   -> Z - A
    NomeDaModel::where('id','>',1)->orderBy('nome','desc')->get()

11 - Trabalhando com Collections

* Para recuperar o 1o elemento
NomeDaModel::all()->first()

* Para recuperar o último elemento
NomeDaModel::all()->last()

* Para inverter a ordem dos elementos
NomeDaModel::all()->reverse()

* Para recuperar um atributo de todos os elementos
NomeDaModel::all()->pluck('nome')
 -> retorna o atributo nome de cada NomeDaModel

NomeDaModel::all()->pluck('nome')->toArray()
NomeDaModel::all()->pluck('nome')->toJson() 
NomeDaModel::all()->random()

* Para retornar a média númerica 
NomeDaModel::all()->avg('atributo numerico')

* Para retornar o máximo e o mínimo
NomeDaModel::all()->max('atributo numerico')
NomeDaModel::all()->min('atributo numerico')

* Para retornar a soma
NomeDaModel::all()->sum('atributo numerico')

* Para retornar a collection agrupada por um número x
Exemplo: Minha collection de Marcas possui 1 elementos, 
se eu quisesse retornar de 2 em 2:
NomeDaModel::all()->chunk(2)

Se eu quisesse retornar de 3 em 3
NomeDaModel::all()->chunk(3) 

12- Atualizando registros
    * $objeto = NomeDaModel::find(id)
    * $objeto->atributo = "valorDoAtributo"
    * $objeto->save()

    OU

   $objeto = NomeDaModel::find(id)
   $objeto->fill(['nome'=>'sonic'])
   $objeto->save()fill(['nome'=>'sonic'])



