----- USANDO O DOCKER COMO CLIENTE ---------

SUBIR CONTAINERS
docker-compose up -d 

ENTRAR NO CONTAINER
docker exec -u 1000 -it dev_php bash |(em que dev_php é o nome do container, e tbm poderia se seu ID)

PARAR CONTAINER (sempre ao final do dia de trabalho, para n dar conflito de network)
docker-compose down 

--------- FIM USANDO DOCKER COMO CLIENTE ----------


---- ACESSANDO O BANCO MYSQL NO TERMINAL ---
mysql -u user -p

Para usar a base de dados:
use nome_do_banco; 

Para exibir as tabelas da base de dados:
show tables; 

Para detalhar a migration:
describe migrations;

Para detalhar uma tabela:
describe nome_da_table;

---- FIM ACESSANDO BANCO MYSQL NO TERMINAL ---


----------- MIGRATIONS ------------

Criar migration
php artisan make:migration nome_migration 

Para executar as migracoes pendentes:
php artisan migrate 
OBS:o arquivo .env deve estar configurado com o nome do bando, usuário e senha

Para desfazer a última migrate (que pode ter executado varias migrations simultaneamente)
php artisan migrate:rollback 

Para desfazer todas as migrations
php artisan migrate: fresh
OBS: não chamará o down(), mas sim dar um 
DROP TABLE em todas as tabelas

Para desfazer e refazer todas as migrates
php artisan migrate:refresh 
OBS: o método down() das migrations será chamado, para desfazer
depois o método up() das mesmas, para refazer.

Para visualizar as migrations:
php artisan migrate:status

---------- FIM MIGRATIONS ------------------

---------- MODEL ---------------
* Para criar um model 
php artisan make:model NomeDoModel
-> cria arquivo .php dentro de app\models

---------- TINKER PARA MANIPULAR AS MODELS -------
* A partir de um terminal (que tenha acesso php)
Para Manipular Models:

1- php artisan tinker (ambiente de terminal para interagir com a aplicação laravel)

2- Para selecionar a Model
use \App\Models\NomeDaModel

3- Para listar os registros (array) 
NomeDaModel::all()

4- Para instanciar a Model 
   $objeto = new NomeDaModel
   $objeto->save()
   (cria vazio) ou
   $objeto = NomeDaModel::create(["nome"=>"LG"]) 

5- Para atribuir valor a um atributo. 
$objeto->atributo = "valorDoAtributo";
    $objeto->save()

6- Para recuperar um ou mais registros, baseado na PK
    NomeDaModel::find(id)
    NomeDaModel::find([id1, id2, id3])

7- Para recuperar registros baseados em um atributo 
    NomeDaModel::where('id', 1)->get()
    NomeDaModel::where('id','>','1')->get()
    NomeDaModel::where('nome', 'samsung')->get()
    
    NomeDaModel::whereBetween('id', [2,3])->get
        -> retornará todos os registros no intervalo 2-3
    
    NomeDaModel::whereNotBetween('id',[2,3])
        -> retornará todos os registros q não estão no intervalo 2-3

    NomeDaModel::whereNoIn('id', [2,4])
        -> retornará todos os registros que não têm id 2 ou 4. (não é intervalo!)

    NomeDaModel::whereIn('id', [2,4])
        -> retornará os registros que têm id 2 ou 4. (não é intervalo!)

Where-> Pode ser passado os comparativos (virgula (interpretará como ==), <>, <, >, <=, >=)

8 - Consultando com o like
        A) Passando o valor no parâmetro
    NomeDaModel::where('nome', 'like', '%e%')
        B) Passando uma variável no parâmetro
    $nome = Amanda;
    NomeDaModel::where('nome', 'like', "%$nome%")

------ FIM TINKER -----









